//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.4

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "files")]
#[serde(rename_all = "camelCase")]
#[typeshare::typeshare]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub ulid: String,
    pub path: String,
    pub hash: String,
    pub created_at: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::file_data::Entity")]
    FileData,
    #[sea_orm(has_many = "super::file_metadata::Entity")]
    FileMetadata,
    #[sea_orm(has_many = "super::files_tags::Entity")]
    FilesTags,
}

impl Related<super::file_data::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::FileData.def()
    }
}

impl Related<super::file_metadata::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::FileMetadata.def()
    }
}

impl Related<super::files_tags::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::FilesTags.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
